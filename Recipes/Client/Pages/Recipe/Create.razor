@page "/recipes/create"

@using Recipes.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.WebUtilities
@using Newtonsoft.Json
@using System.Linq
@using System.Collections.Generic
@using Microsoft.AspNetCore.Mvc
@using System.Diagnostics

@using Client.Components

@attribute [Authorize]

@inject HttpClient PrivateHttp
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime Js
@inject NavigationManager NavigationManager

<!-- @using FluentValidation-->
<AuthorizeView>
    <Authorized>
        <MudProgressLinear @ref="@ProgressBar" Color="Color.Secondary" Value="@ProgressValue" Class="@(progressBarClass)" Size="Size.Medium" />
        <MudCard Class="mb-5">
            <MudForm Model="@model" @ref="@form">
                <MudCardContent>
                    <MudExpansionPanels MultiExpansion="true">
                        <MudExpansionPanel Text="Recipe Details" @bind-IsExpanded="firstIsExpanded">
                            <MudTextField @bind-Value="model.Name"
                                          For="@(() => model.Name)"
                                          Immediate="true"
                                          Label="Name"
                                          Variant="Variant.Outlined"></MudTextField>
                            <MudTextField @bind-Value="model.Description"
                                          For="@(() => model.Description)"
                                          Immediate="true"
                                          Label="Description"
                                          Variant="Variant.Outlined"
                                          Lines="3"></MudTextField>
                            <MudGrid Justify="Justify.SpaceEvenly" Spacing="2">
                                <MudItem xs="12" sm="12" md="6" lg="6">
                                    <MudNumericField @bind-Value="model.DurationInMinutes"
                                                     For="@(() => model.DurationInMinutes)"
                                                     Step="5"
                                                     Immediate="true"
                                                     Label="Duration"
                                                     Variant="Variant.Outlined"
                                                     Adornment="Adornment.End"
                                                     AdornmentText="minutes"></MudNumericField>
                                </MudItem>
                                <MudItem xs="12" sm="12" md="6" lg="6">
                                    <MudNumericField @bind-Value="model.NumberOfServings"
                                                     For="@(() => model.NumberOfServings)"
                                                     Immediate="true"
                                                     Label="Number of servings"
                                                     Variant="Variant.Outlined"
                                                     AdornmentIcon="@Icons.Material.Filled.Numbers"></MudNumericField>
                                </MudItem>
                            </MudGrid>
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="Ingredients">
                            <MudAutocomplete @ref="@mudAutocomplete"
                                             T="IngredientView" Label="Search ingredients"
                                             @bind-Value="searchValue"
                                             SearchFunc="@SearchIngredients"
                                             AdornmentIcon="@Icons.Material.Filled.Search"
                                             AdornmentColor="Color.Primary"
                                             ToStringFunc="((x) => x.Name)"
                                             Variant="Variant.Filled"
                                             Immediate="false"
                                             Clearable="true"></MudAutocomplete>

                            <MudTable @ref="@ingredientsTable" T="IngredientWithQuantity"
                                      Items="model.IngredientsWithQuantities"
                                      CanCancelEdit="true"
                                      RowEditPreview="BackupIQ"
                                      RowEditCancel="ResetIQ"
                                      RowEditCommit="CommitIQ">
                                <HeaderContent>
                                    <MudTh>
                                        <MudTableSortLabel SortBy="new Func<IngredientWithQuantity, object>(x => x.Name)">
                                            Name
                                        </MudTableSortLabel>
                                    </MudTh>
                                    <MudTh>
                                        <MudTableSortLabel SortBy="new Func<IngredientWithQuantity, object>(x => x.Quantity)">
                                            Quantity (grams)
                                        </MudTableSortLabel>
                                    </MudTh>
                                </HeaderContent>
                                <RowTemplate Context="mudContext">
                                    <MudTd DataLabel="Name">@mudContext.Name</MudTd>
                                    <MudTd DataLabel="Quantity (g)">@mudContext.Quantity</MudTd>
                                    <MudTd>
                                        <MudChip Color="MudBlazor.Color.Error"
                                                 Text="Remove"
                                                 OnClick="(() => model.IngredientsWithQuantities.Remove(mudContext))">

                                        </MudChip>
                                    </MudTd>
                                </RowTemplate>
                                <RowEditingTemplate Context="mudContext">
                                    <MudTd DataLabel="Name">@mudContext.Name</MudTd>
                                    <MudTd DataLabel="Quantity">
                                        <MudNumericField Variant="Variant.Outlined" @bind-Value="@mudContext.Quantity" Required Min="1" Step="5"></MudNumericField>
                                    </MudTd>
                                </RowEditingTemplate>

                            </MudTable>
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="Recipe Steps">
                            <MudTable @ref="@stepsTable" T="RecipeStep"
                                      Items="model.RecipeSteps"
                                      CanCancelEdit="true"
                                      RowEditPreview="BackupRS"
                                      RowEditCancel="ResetRS">
                                <HeaderContent>
                                    <MudTh>
                                        Number
                                    </MudTh>
                                    <MudTh>
                                        Title
                                    </MudTh>
                                    <MudTh>
                                        Description
                                    </MudTh>
                                </HeaderContent>
                                <RowTemplate Context="mudContext">
                                    <MudTd DataLabel="Number">@mudContext.StepNumber</MudTd>
                                    <MudTd DataLabel="Title">@mudContext.StepTitle</MudTd>
                                    <MudTd DataLabel="Description">@mudContext.StepDescription</MudTd>
                                    <MudTd>
                                        <MudChip Color="MudBlazor.Color.Error"
                                                 Text="Remove"
                                                 OnClick="(() => model.RecipeSteps.Remove(mudContext))">

                                        </MudChip>
                                    </MudTd>
                                </RowTemplate>
                                <RowEditingTemplate Context="mudContext">
                                    <MudTd DataLabel="Number">@mudContext.StepNumber</MudTd>
                                    <MudTd DataLabel="Title">
                                        <MudTextField Variant="Variant.Outlined" @bind-Value="@mudContext.StepTitle" Required />
                                    </MudTd>
                                    <MudTd DataLabel="Description">
                                        <MudTextField Variant="Variant.Outlined" @bind-Value="@mudContext.StepDescription" Lines="3" Required />
                                    </MudTd>
                                </RowEditingTemplate>
                            </MudTable>
                            <MudDivider DividerType="DividerType.Middle" Class="my-3" />
                            <MudFab OnClick="() => AddStepOnClick()" Class="ma-2" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Label="Add Step" />
                            @*
                                                    <MudTimeline TimelineAlign="TimelineAlign.Start" TimelinePosition="TimelinePosition.Start">
                                                        @foreach (var item in model.RecipeSteps)
                                                        {
                                                            <MudTimelineItem Color="Color.Primary" Elevation="25" Variant="Variant.Filled">
                                                                <ItemDot>
                                                                    <MudMenu Size="Size.Medium" Icon="@Icons.Material.Filled.MoreVert">
                                                                        <MudMenuItem>
                                                                            <MudButton Variant="Variant.Filled"
                                                                                       StartIcon="@Icons.Material.Filled.Delete"
                                                                                       Color="Color.Error"
                                                                                       OnClick="(() => RemoveStepOnClick(item))">Delete</MudButton>
                                                                        </MudMenuItem>
                                                                    </MudMenu>
                                                                </ItemDot>
                                                                <ItemContent>
                                                                    <Recipes.Client.Components.RecipeStepComp Title="@item.StepTitle"
                                                                                                              Description="@item.StepDescription"
                                                                                                              OnTitleChanged="((e) => item.StepTitle = e)"
                                                                                                              OnDescriptionChanged="((e) => item.StepDescription = e)" />
                                                                </ItemContent>
                                                            </MudTimelineItem>
                                                        }
                                                    </MudTimeline>
                                                    <MudFab OnClick="() => AddStepOnClick()" Class="my-2" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Label="Add Step" />
                            </MudExpansionPanel>
                            *@
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="Tags">
                            <MudChipSet Mandatory="true" OnClose="ClosedChip" AllClosable="true">
                                @foreach (var item in AutoTags)
                                {
                                    <MudChip Variant="Variant.Outlined" Text="@item.Name" Color="Color.Secondary" DisableRipple="true" Default="true"></MudChip>
                                }
                                @foreach (var item in model.Tags)
                                {
                                    <MudChip Variant="Variant.Outlined" Text="@item.Name" Color="Color.Primary" DisableRipple="true"></MudChip>
                                }
                            </MudChipSet>

                            <MudTextField @ref="addTagTextField" T="string" Label="Add a tag" Variant="Variant.Outlined"
                                          Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Add"
                                          OnAdornmentClick="AddTag" Validation="new Func<string, bool>(TagValidation)" />
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="Nutritional values">
                            <MudTable Items="NutritionalValuesDictionary()">
                                <RowTemplate Context="mudContext">
                                    <MudTd>@mudContext.Key</MudTd>
                                    <MudTd>@mudContext.Value</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudExpansionPanel>
                    </MudExpansionPanels>

                </MudCardContent>
            </MudForm>
        </MudCard>

        <MudFab Label="Create recipe" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Done"
                Size="Size.Medium" Style="position: fixed; right: 50px; bottom: 40px"
                OnClick="Post" />
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }

    MudForm form;

    MudAutocomplete<IngredientView> mudAutocomplete;

    MudProgressLinear ProgressBar;

    MudTable<IngredientWithQuantity> ingredientsTable;
    MudTable<RecipeStep> stepsTable;

    RecipeCreate model = new RecipeCreate();

    HashSet<IngredientView> ingredients { get; set; } = new HashSet<IngredientView>();

    HashSet<IngredientWithQuantity> selectedIngredients { get; set; } = new HashSet<IngredientWithQuantity>();

    private HttpClient publicHttpClient;
    private HttpClient privateHttpClient;

    private IngredientView _searchValue = new IngredientView();

    private IngredientView searchValue
    {
        get
        {
            return _searchValue;
        }
        set
        {
            _searchValue = value;
            OnSelectChanged();
        }
    }

    private async void Post()
    {
        // model.AuthorId = "anon";

        // in order to not add duplicate auto-tags

        var modelToPost = new RecipeCreate()
        {
            Author = model.Author,
            Name = model.Name,
            Description = model.Description,
            NumberOfServings = model.NumberOfServings,
            DurationInMinutes = model.DurationInMinutes,
            RecipeSteps = model.RecipeSteps,
            IngredientsWithQuantities = model.IngredientsWithQuantities,
            Tags = model.Tags,
            NutritionalValues = model.NutritionalValues
        };
        modelToPost.Tags.UnionWith(AutoTags);
        var response = await PrivateHttp.PostAsJsonAsync("api/Recipe", modelToPost);
        if (response.IsSuccessStatusCode)
        {
            var location = response.Headers.GetValues("Location").First();
            var id = location.Split('/').Last();
            var postedAt = NavigationManager.BaseUri + "recipes/view/" + id;
            Snackbar.Add("Recipe succesfully posted at " + postedAt, Severity.Success);
            await Task.Delay(1000);

            NavigationManager.NavigateTo(postedAt);
        }
        else
        {
            Snackbar.Add("Unable to post the recipe", Severity.Error);
        }
    }

    private MudTextField<string> addTagTextField;

    private bool TagValidation(string value) =>
        !string.IsNullOrWhiteSpace(value)
        && value.Length >= 3
        && !model.Tags.Any(t => t.Name.Equals(value))
        && !AutoTags.Any(t => t.Name.Equals(value));

    private void ClosedChip(MudChip chip)
    {
        model.Tags.RemoveWhere(x => x.Name == chip.Text);
    }

    private void AddTag()
    {
        if (TagValidation(addTagTextField.Text))
        {
            model.Tags.Add(new TagEdit() { Name = addTagTextField.Text.ToLower() });
            addTagTextField.SetText("");
            addTagTextField.ResetValidation();
        }
        else
        {
            Snackbar.Add("This tag has already been added", Severity.Warning);
        }
    }

    private IngredientWithQuantity iqBeforeEdit;
    private RecipeStep rsBeforeEdit;

    private void CommitIQ(object item)
    {
        AutoTags = model.GetTagsFromNutritionalValues();
    }

    private void BackupIQ(object item)
    {
        iqBeforeEdit = new IngredientWithQuantity()
        {
            Quantity = ((IngredientWithQuantity)item).Quantity
        };
    }

    private void BackupRS(object item)
    {
        rsBeforeEdit = new RecipeStep()
        {
            StepTitle = ((RecipeStep)item).StepTitle,
            StepDescription = ((RecipeStep)item).StepDescription
        };
    }

    private void ResetIQ(object item)
    {
        ((IngredientWithQuantity)item).Quantity = iqBeforeEdit.Quantity;
    }

    private void ResetRS(object item)
    {
        ((RecipeStep)item).StepTitle = rsBeforeEdit.StepTitle;
        ((RecipeStep)item).StepDescription = rsBeforeEdit.StepDescription;
    }

    private void AddStepOnClick()
    {
        if (model.RecipeSteps.Count == 0)
        {
            model.RecipeSteps.Add(new RecipeStep() { StepNumber = 1});
        }
        else
        {
            if (model.RecipeSteps.Last().StepTitle != string.Empty
                && model.RecipeSteps.Last().StepDescription.Length > 10)
            {
                model.RecipeSteps.Add(new RecipeStep() { StepNumber = model.RecipeSteps.Last().StepNumber + 1});
            }
        }
        StateHasChanged();
    }

    private MetaData _metaData = new MetaData()
    {
        PageSize = 240,
        CurrentPage = 1,
        TotalCount = 0,
        TotalPages = 0
    };

    private double ProgressValue { get; set; } = 1;

    private string progressBarClass = "my-5";

    private bool firstIsExpanded = true;

    public HashSet<TagEdit> AutoTags = new HashSet<TagEdit>();

    private bool _userIsAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        publicHttpClient = ClientFactory.CreateClient("Recipes.Anonymous");

        var authState = await AuthenticationState;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _userIsAuthenticated = true;
            model.Author = user.Identity.Name;
        }
        else
        {
            NavigationManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
        }

        //model.IngredientsWithQuantities = selectedIngredients;

        //Stopwatch stopwatch = new Stopwatch();
        //stopwatch.Start();

        //for (int i = 0; i < 50; i++) {

        //131.9270999 seconds
        //  ingredients = await GetAllAsync();


        //207.9938999 seconds
        ingredients = await GetIngredientsAsync();
        ProgressValue = 100;
        await HideProgressBar();
        //}
        //stopwatch.Stop();
        //await Js.InvokeVoidAsync("console.log", stopwatch.Elapsed.TotalSeconds);
    }

    private async Task HideProgressBar()
    {
        await Task.Delay(500);

        progressBarClass += " hide";
    }

    private Dictionary<string, decimal> NutritionalValuesDictionary()
    {
        var x = new Dictionary<string, decimal>();
        x.Add("Energy", model.NutritionalValues.Kilocalories);
        x.Add("Protein", model.NutritionalValues.Protein);
        x.Add("Fat", model.NutritionalValues.Fat);
        x.Add("Carbs", model.NutritionalValues.Carbs);
        return x;
    }

    private void OnSelectChanged()
    {
        if (ingredients.Contains(searchValue))
        {
            var iq = new IngredientWithQuantity
            {
                Ingredient = searchValue,
                Quantity = 100
            };
            model.IngredientsWithQuantities.Add(iq);
            //to refresh tags
            AutoTags.Clear();
            AutoTags.UnionWith(model.GetTagsFromNutritionalValues());

            ingredients.Remove(searchValue);
            searchValue = new IngredientView();
        }
    }

    private async Task<HashSet<Ingredient>> GetAllAsync()
    {
        var i = new HashSet<Ingredient>();
        var param = new Dictionary<string, string>
        {
            ["pagination"] = "false"
        };
        var uri = QueryHelpers.AddQueryString("api/Ingredient", queryString: param);
        try
        {

            var response = await publicHttpClient.GetAsync(uri);
            var content = await response.Content.ReadAsStringAsync();
            //_metaData = JsonConvert.DeserializeObject<MetaData>(response.Headers.GetValues("X-Pagination").First());
            i = JsonConvert.DeserializeObject<HashSet<Ingredient>>(content);
            // await Js.InvokeVoidAsync("console.log", i);
            // await Js.InvokeVoidAsync("console.log", _metaData);
            // await Js.InvokeVoidAsync("console.log", ingredients);
        }
        catch (Exception)
        {
            // NavigationManager.NavigateTo("/");
        }
        return i;
    }

    private async Task<HashSet<IngredientView>> GetIngredientsAsync()
    {

        List<Task<IEnumerable<IngredientView>>> taskList = new List<Task<IEnumerable<IngredientView>>>();

        var i = new List<IngredientView>();
        var i_start = await GetIngredientsPageAsync(_metaData);
        i.AddRange(i_start);

        for (int index = 2; index < _metaData.TotalPages; index ++)
        {
            _metaData.CurrentPage = index;
            taskList.Add(GetIngredientsPageAsync(_metaData));
            //var i_index = await GetIngredientsPageAsync(_metaData);
            //i.AddRange(i_index);
        }
        var ii = await Task.WhenAll<IEnumerable<IngredientView>>(taskList);
        foreach(var result in ii)
        {
            i.AddRange(result);
        }
        return i.ToHashSet();
    }

    private async Task<IEnumerable<IngredientView>> GetIngredientsPageAsync(MetaData metaData)
    {
        var i = new List<IngredientView>();
        var param = new Dictionary<string, string>()
        {
            ["pageSize"] = metaData.PageSize.ToString(),
            ["pageNumber"] = metaData.CurrentPage.ToString()
        };
        var uri = QueryHelpers.AddQueryString("api/Ingredient", queryString: param);
        try
        {
            var response = await publicHttpClient.GetAsync(uri);
            var content = await response.Content.ReadAsStringAsync();

            _metaData = JsonConvert.DeserializeObject<MetaData>(response.Headers.GetValues("X-Pagination").First());

            var val = _metaData.CurrentPage * 100 / _metaData.TotalPages;
            ProgressValue = ProgressValue < val ? val : ProgressValue;
            StateHasChanged();

            i = JsonConvert.DeserializeObject<List<IngredientView>>(content);
        }
        catch (Exception)
        {

        }
        //StateHasChanged();
        return i;
    }

    private async Task<IEnumerable<IngredientView>> SearchIngredients(string value)
    {
        if (string.IsNullOrEmpty(value))
            return await Task.FromResult<IEnumerable<IngredientView>>(new List<IngredientView>());
        return await Task.FromResult<IEnumerable<IngredientView>>(ingredients.Where(x =>
            x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }

}
