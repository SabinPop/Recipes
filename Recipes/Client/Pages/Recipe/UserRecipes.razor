@page "/recipes/by/{author}"
@page "/my/recipes"

@using Recipes.Shared.Models
@using Recipes.Shared.Paging
@using Microsoft.AspNetCore.Authorization
@using System.Collections.Generic
@using Microsoft.AspNetCore.WebUtilities
@using Newtonsoft.Json
@using Recipes.Client.Components

@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager


@if (isLoading == true)
{
    <Loading></Loading>
}
else if (Recipes.Count() == 0)
{
    <MudText Typo="Typo.body1">
        No recipes found
    </MudText>
}
else
{
    <h2 class="ma-6"> @(string.IsNullOrWhiteSpace(Author) ? "My" : $"{Author}") recipes - Page </h2>
    <MudGrid Justify="Justify.SpaceEvenly" Spacing="2" Class="my-6">
        @foreach (var recipe in Recipes)
        {
            <RecipePartial RecipeDetails="@recipe"></RecipePartial>
        }
    </MudGrid>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    [Parameter]
    public string Author { get; set; } = null;

    HttpClient publicHttpClient;
    List<RecipeDetails> Recipes = new List<RecipeDetails>();

    private bool isLoading = false;

    private string _user = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        _user = authState.User.Identity.Name;

        if (!string.IsNullOrWhiteSpace(Author) && !string.IsNullOrWhiteSpace(_user))
        {
            if(Author.Equals(_user))
                NavigationManager.NavigateTo(NavigationManager.BaseUri + "my/recipes/");
        }

        if (NavigationManager.Uri.StartsWith(NavigationManager.BaseUri + "my/recipes"))
        {
            if(!authState.User.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
            }
        }


        publicHttpClient = ClientFactory.CreateClient("Recipes.Anonymous");

        isLoading = true;
        Recipes = await GetAllAsync();
        isLoading = false;
    }

    private async Task<List<RecipeDetails>> GetAllAsync()
    {
        var i = new List<RecipeDetails>();
        var param = new Dictionary<string, string>
        {
            ["pagination"] = "false",
            ["author"] = $"{Author ?? _user}",
            ["username"] = _user
        };
        var uri = QueryHelpers.AddQueryString("api/Recipe", queryString: param);
        try
        {

            var response = await publicHttpClient.GetAsync(uri);
            var content = await response.Content.ReadAsStringAsync();
            i = JsonConvert.DeserializeObject<List<RecipeDetails>>(content);
        }
        catch (Exception)
        {
            // NavigationManager.NavigateTo("/");
        }
        return i;
    }
}
