@using Recipes.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json

@inject IHttpClientFactory ClientFactory

@if (Model.RecipeId == 0)
{
    <MudPaper Class="d-flex justify-center align-center" Elevation="0">
        <MudProgressCircular Class="object-center ma-6" Color="Color.Secondary" Indeterminate="true" Size="Size.Large"></MudProgressCircular>
    </MudPaper>
}
else { 
<MudProgressLinear @ref="@ProgressBar" Color="Color.Secondary" Value="@ProgressValue" Class="@(progressBarClass)" Size="Size.Medium" />
<MudCard Class="mb-5">
    <MudCardContent>
        <MudExpansionPanels MultiExpansion="true">
            <MudExpansionPanel Text="Recipe Details" IsExpanded="true">
                <MudField Label="Name" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Title" Variant="Variant.Outlined">
                    @Model.Name
                </MudField>
                <MudTextField T="string"
                              Text="@Model.Description"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Description"
                              ReadOnly="true"
                              Label="Description"
                              Variant="Variant.Outlined"
                              Lines="5"></MudTextField>
                <MudGrid Justify="Justify.FlexStart" Spacing="2">
                    <MudItem xs="12" sm="12" md="6" lg="4">
                        <MudField Label="Duration" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Timer" Variant="Variant.Outlined">
                            @Model.DurationInMinutes minutes
                        </MudField>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6" lg="4">
                        <MudField Label="Number of servings" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Numbers" Variant="Variant.Outlined">
                            @Model.NumberOfServings servings
                        </MudField>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6" lg="4">
                        <MudField Label="Creation date" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.EditCalendar" Variant="Variant.Outlined">
                            @Model.CreationDate.Date.ToShortDateString()
                        </MudField>
                    </MudItem>
                </MudGrid>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Ingredients" IsExpanded="true">
                <MudTable T="IngredientWithQuantity"
                          Items="Model.IngredientsWithQuantities">
                    <HeaderContent>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<IngredientWithQuantity, object>(x => x.Name)">
                                Name
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<IngredientWithQuantity, object>(x => x.Quantity)">
                                Quantity (grams)
                            </MudTableSortLabel>
                        </MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Quantity (g)">@context.Quantity</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Recipe Steps" IsExpanded="true">
                <MudTimeline TimelineAlign="TimelineAlign.Start" TimelinePosition="TimelinePosition.Start">
                    @foreach (var item in Model.RecipeSteps)
                    {
                        <MudTimelineItem Color="Color.Primary" Elevation="25" Variant="Variant.Filled">
                            <ItemContent>
                                <Recipes.Client.Components.RecipeStepComp ReadOnly="true" Title="@item.StepTitle"
                                                                            Description="@item.StepDescription" />
                            </ItemContent>
                        </MudTimelineItem>
                    }
                </MudTimeline>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Tags" IsExpanded="true">
                <MudChipSet>
                    @foreach (var item in Model.Tags)
                    {
                        <MudChip Variant="Variant.Outlined" Text="@item.Name" Color="Color.Primary" DisableRipple="true"></MudChip>
                    }
                </MudChipSet>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Nutritional values" IsExpanded="true">
                <MudTable Items="Model.NutritionalValuesDictionary()">
                    <RowTemplate>
                        <MudTd>@context.Key</MudTd>
                        <MudTd>@context.Value</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudExpansionPanel>
        </MudExpansionPanels>

    </MudCardContent>
</MudCard>
}

@code {

    [Parameter]
    public int Id { get; set; }

    MudProgressLinear ProgressBar;

    MudTable<IngredientWithQuantity> ingredientsTable;
    MudTable<RecipeStep> stepsTable;

    private HttpClient publicHttpClient;

    private RecipeView Model = new RecipeView();

    private double ProgressValue { get; set; } = 1;

    private string progressBarClass = "my-5";

    protected override async Task OnInitializedAsync()
    {
        publicHttpClient = ClientFactory.CreateClient("Recipes.Anonymous");
        Model = await GetRecipeAsync(Id);
        ProgressValue = 100;
        await HideProgressBar();
    }

    private async Task<RecipeView> GetRecipeAsync(int id)
    {
        var recipe = new RecipeView();
        try
        {
            var response = await publicHttpClient.GetAsync("api/Recipe/" + id);
            var content = await response.Content.ReadAsStringAsync();
            recipe = JsonConvert.DeserializeObject<RecipeView>(content);
        }
        catch (Exception)
        {

        }
        return recipe;
    }

    private async Task HideProgressBar()
    {
        await Task.Delay(500);

        progressBarClass += " hide";
    }

}
